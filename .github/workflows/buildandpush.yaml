name: CI/CD for Kind

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/wisecow-app:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/wisecow-app:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: 'latest'

      - name: Setup Kind Cluster
        uses: helm/kind-action@v1
        with:
          cluster_name: "kind"

      - name: Install Ingress via Helm
        run: |
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm repo update
          helm install quickstart-ingress ingress-nginx/ingress-nginx \
            --set controller.service.type=NodePort


      - name: Wait for Ingress to be Ready
        run: |
          kubectl wait --namespace default --for=condition=ready pod \
          -l app.kubernetes.io/name=ingress-nginx --timeout=90s

      - name: Get Kind Node IP
        run: |
          KIND_NODE_IP=$(kubectl get nodes -o jsonpath='{.items[0].status.addresses[?(@.type=="InternalIP")].address}' | sed 's/%.*//')
          echo "KIND_NODE_IP=${KIND_NODE_IP}" >> $GITHUB_ENV

      - name: Add wisecow.example.com to /etc/hosts
        run: |
          echo "${{ env.KIND_NODE_IP }} wisecow.example.com" | sudo tee -a /etc/hosts

      - name: Install mkcert and Generate Self-Signed Cert
        run: |
          sudo apt update && sudo apt install -y libnss3-tools
          curl -fsSL https://github.com/FiloSottile/mkcert/releases/download/v1.4.3/mkcert-v1.4.3-linux-amd64 -o mkcert
          chmod +x mkcert && sudo mv mkcert /usr/local/bin/
          mkcert -install
          mkcert -cert-file tls.crt -key-file tls.key wisecow.example.com
          kubectl create secret tls wisecow-tls-cert --cert=tls.crt --key=tls.key

      - name: Load Docker Image into Kind Cluster
        run: |
          kind load docker-image ${{ secrets.DOCKER_USERNAME }}/wisecow-app:latest --name kind

      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml
          kubectl apply -f k8s/ingress.yaml

      - name: Update Deployment to Use Latest Image
        run: |
          kubectl set image deployment/wisecow-app wisecow-app=${{ secrets.DOCKER_USERNAME }}/wisecow-app:latest --record

      - name: Restart Deployment to Apply Image Update
        run: |
          kubectl rollout restart deployment/wisecow-app

      - name: Verify Deployment
        run: |
          kubectl get pods -A
          kubectl get svc
          kubectl get ingress -A

